selector_to_html = {"a[href=\"#articles\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Articles<a class=\"headerlink\" href=\"#articles\" title=\"Link to this heading\">#</a></h4><p>Periodical issues can include a list of articles in the <code class=\"docutils literal notranslate\"><span class=\"pre\">article</span></code> field. Here\u2019s an example of an article entry from <em>Walkabout</em>:</p>", "a[href=\"get-ocr-layout-data.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">25.4. </span>HOW TO: Get and use OCR data from a book or periodical page<a class=\"headerlink\" href=\"#how-to-get-and-use-ocr-data-from-a-book-or-periodical-page\" title=\"Link to this heading\">#</a></h1><p>The Optical Character Recognition (OCR) process extracts text from images. In doing so, it captures information about the <em>position</em> of each object on the page. This positional information isn\u2019t directly exposed in Trove, but it\u2019s used by the interface. For example, when you view a page in Trove\u2019s <a class=\"reference internal\" href=\"../../what-is-trove/interfaces.html#interfaces-digitised-journal-viewer\"><span class=\"std std-ref\">digital book &amp; journal viewer</span></a> it loads OCR data relating to that page using an internal API.</p><p>To access this API and download the OCR data for any page in a book or periodical you just need the page identifier. This <a class=\"reference external\" href=\"http://nla.gov.au/nla.obj-326405522\">page</a> in <em>Pacific Islands Monthly</em> has the identifier <code class=\"docutils literal notranslate\"><span class=\"pre\">nla.obj-326405522</span></code>. To retrieve the OCR data you just add <code class=\"docutils literal notranslate\"><span class=\"pre\">/ocr</span></code> to the identifier:</p>", "a[href=\"download-items-text-images.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">25.2. </span>HOW TO: Automate the download of digitised items as text, images, or PDFs<a class=\"headerlink\" href=\"#how-to-automate-the-download-of-digitised-items-as-text-images-or-pdfs\" title=\"Link to this heading\">#</a></h1><p>You can download text, images, and PDFs from individual digitised items <a class=\"reference internal\" href=\"../../accessing-data/using-web-interface.html\"><span class=\"std std-doc\">using the Trove web interface</span></a>. But only the text of periodical articles is available for machine access through the Trove API. This makes it difficult to assemble datasets, or build processing pipelines involving digitised resources. This page documents a series of work arounds that enable you to automate the download of digitised items as text, images, or PDFs.</p>", "a[href=\"#chapters\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Chapters<a class=\"headerlink\" href=\"#chapters\" title=\"Link to this heading\">#</a></h4><p>Books can include a list of chapters in the <code class=\"docutils literal notranslate\"><span class=\"pre\">chapter</span></code> field. Here\u2019s an example of a chapter entry from <em>The story of the Australian bushrangers</em>:</p>", "a[href=\"#extracting-the-metadata\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Extracting the metadata<a class=\"headerlink\" href=\"#extracting-the-metadata\" title=\"Link to this heading\">#</a></h2><p>The function to extract the metadata is fairly straightforward. It loads the viewer\u2019s HTML code and uses a regular expression to find and extract the embedded JSON string. It expects an <code class=\"docutils literal notranslate\"><span class=\"pre\">nla.obj</span></code> identifier. For the image and map viewers, this is the identifier of an individual item. For the book and journal viewer you can use the <code class=\"docutils literal notranslate\"><span class=\"pre\">nla.obj</span></code> identifier for the book, issue, page, or article. This is because page and article identifiers are redirected to issues. Here\u2019s a full examp[le that extracts the embedded metadata for the book <a class=\"reference external\" href=\"https://nla.gov.au/nla.obj-362059651\"><em>Lord Robert Cecil\u2019s gold fields diary</em></a>.</p>", "a[href=\"#image-and-map-viewer\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Image and map viewer<a class=\"headerlink\" href=\"#image-and-map-viewer\" title=\"Link to this heading\">#</a></h3><p>The image and map viewer includes a <code class=\"docutils literal notranslate\"><span class=\"pre\">copies</span></code> field at the top level of the JSON data. This field includes a list of the images associated with this item. Here\u2019s an example from <a class=\"reference external\" href=\"http://nla.gov.au/nla.obj-133327370\">nla.obj-133327370</a>:</p>", "a[href=\"#pages\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Pages<a class=\"headerlink\" href=\"#pages\" title=\"Link to this heading\">#</a></h4><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">page</span></code> field contains details of every page image. Here\u2019s the metadata for a single page in the book <em>The story of the Australian bushrangers</em>:</p>", "a[href=\"#get-marc-catalogue-data\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Get MARC catalogue data<a class=\"headerlink\" href=\"#get-marc-catalogue-data\" title=\"Link to this heading\">#</a></h2><p>The MARC data is contained in the <code class=\"docutils literal notranslate\"><span class=\"pre\">marcData</span></code> field. This field can contain multiple records \u2013 the main metadata is contained in the record which has <code class=\"docutils literal notranslate\"><span class=\"pre\">type</span></code> set to <code class=\"docutils literal notranslate\"><span class=\"pre\">Bibliographic</span></code> in the <code class=\"docutils literal notranslate\"><span class=\"pre\">leader</span></code> field.</p><p>Tools like <a class=\"reference external\" href=\"https://pymarc.readthedocs.io/en/latest/index.html\">PyMARC</a> can help you get information from MARC records, however, Trove\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">marcData</span></code> isn\u2019t in a format that PyMARC recognises. The function below finds the <code class=\"docutils literal notranslate\"><span class=\"pre\">Bibliographic</span></code> record and restructures the data for use with PyMARC.</p>", "a[href=\"#get-information-about-images-and-maps\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Get information about images and maps<a class=\"headerlink\" href=\"#get-information-about-images-and-maps\" title=\"Link to this heading\">#</a></h2><p>The digitised image and map viewers include information about digitised images in the <code class=\"docutils literal notranslate\"><span class=\"pre\">copies</span></code> field. This function returns the details of the image with the specified role \u2013 defaulting to the <code class=\"docutils literal notranslate\"><span class=\"pre\">access</span></code> version.</p>", "a[href=\"#books-and-journals-viewer\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Books and journals viewer<a class=\"headerlink\" href=\"#books-and-journals-viewer\" title=\"Link to this heading\">#</a></h3><p>The books and journals viewer has a <code class=\"docutils literal notranslate\"><span class=\"pre\">children</span></code> field in the top-level JSON data which includes <code class=\"docutils literal notranslate\"><span class=\"pre\">page</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">article</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">chapter</span></code> fields.</p>", "a[href=\"#get-a-list-of-articles-in-a-periodical-issue\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Get a list of articles in a periodical issue<a class=\"headerlink\" href=\"#get-a-list-of-articles-in-a-periodical-issue\" title=\"Link to this heading\">#</a></h2>", "a[href=\"get-ocr-layout-data.html#other-digitised-ocr-data-crop-images\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Crop images from pages using the OCR coordinates<a class=\"headerlink\" href=\"#crop-images-from-pages-using-the-ocr-coordinates\" title=\"Link to this heading\">#</a></h2><p>One thing you might want to do is to crop text blocks or illustrations from the page image using the OCR coordinates. This is certainly possible, but it\u2019s not always straightforward. The problem is that the coordinates in the OCR data can sometimes refer to images at a higher resolution than those you can access through the web interface. If you try and use the coordinates with a lower resolution image you\u2019ll end up cropping out the wrong areas. The solution is to find the resolution of the image used in creating the coordinates and compare it to the one you\u2019ve downloaded. Dividing the width of the low res image by the width of the high-res image will give you a ratio that you can apply to the coordinates to transform them for use with the downloaded image.</p><p>The original page resolutions are usually included in the metadata embedded in the digital journal viewer.</p>", "a[href=\"#what-metadata-is-available\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">What metadata is available?<a class=\"headerlink\" href=\"#what-metadata-is-available\" title=\"Link to this heading\">#</a></h2><p>The available metadata varies by viewer and format. The main differences are:</p>", "a[href=\"#get-information-about-pages\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Get information about pages<a class=\"headerlink\" href=\"#get-information-about-pages\" title=\"Link to this heading\">#</a></h2><p>Books and periodical issues should include <code class=\"docutils literal notranslate\"><span class=\"pre\">page</span></code> data in the <code class=\"docutils literal notranslate\"><span class=\"pre\">children</span></code> field. To find the number of pages, you just need to get the length of the <code class=\"docutils literal notranslate\"><span class=\"pre\">page</span></code> list.</p>", "a[href=\"#how-to-extract-additional-metadata-from-the-digitised-resource-viewer\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">25.3. </span>HOW TO: Extract additional metadata from the digitised resource viewer<a class=\"headerlink\" href=\"#how-to-extract-additional-metadata-from-the-digitised-resource-viewer\" title=\"Link to this heading\">#</a></h1><p>The viewers you use to examine digitised resources in Trove embed some metadata that isn\u2019t available through the Trove API. This includes a JSON-ified version of the item\u2019s MARC record (presumably copied from the NLA catalogue), as well as structural information used by the viewer itself, such as a list of pages in a digitised book.</p><p>This metadata can be useful in a number of different contexts. For example, you can extract the number of pages in a digitised book, then use this number to <a class=\"reference internal\" href=\"download-items-text-images.html\"><span class=\"doc std std-doc\">automatically download the full text or a PDF</span></a>. The GLAM Workbench includes an example where geospatial coordinates are extracted from the MARC data to add to a <a class=\"reference external\" href=\"https://glam-workbench.net/trove-maps/exploring-digitised-maps/\">harvest of digitised maps</a>.</p>", "a[href=\"#all-viewers\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">All viewers<a class=\"headerlink\" href=\"#all-viewers\" title=\"Link to this heading\">#</a></h3><p>All of the viewers embed some basic metadata, like <code class=\"docutils literal notranslate\"><span class=\"pre\">id</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">title</span></code>, at the top level of the JSON data. However, the actual fields can vary by format and viewer type, so don\u2019t assume that a particular field exists, or has a value. Here\u2019s an example from an issue of <em>Walkabout</em>.</p>"}
skip_classes = ["headerlink", "sd-stretched-link", "sd-rounded-pill"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(`article.bd-article ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
